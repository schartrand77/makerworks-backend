"""Create users table

Revision ID: c32a4553e1d4
Revises: 000000000000
Create Date: 2025-06-15 20:04:42.920695

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'c32a4553e1d4'
down_revision: Union[str, None] = '000000000000'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('filaments')
    op.drop_table('estimate_settings')
    op.drop_table('favorites')
    op.drop_index(op.f('ix_models_geometry_hash'), table_name='models')
    op.drop_table('models')
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.drop_constraint(op.f('uq_user_email'), 'users', type_='unique')
    op.drop_constraint(op.f('uq_user_username'), 'users', type_='unique')
    op.drop_constraint(op.f('users_email_key'), 'users', type_='unique')
    op.drop_constraint(op.f('users_username_key'), 'users', type_='unique')
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    op.drop_column('users', 'bio')
    op.drop_column('users', 'is_active')
    op.drop_column('users', 'language')
    op.drop_column('users', 'avatar')
    op.drop_column('users', 'theme')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('users', sa.Column('theme', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('avatar', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('language', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('bio', sa.TEXT(), autoincrement=False, nullable=True))
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.create_unique_constraint(op.f('users_username_key'), 'users', ['username'], postgresql_nulls_not_distinct=False)
    op.create_unique_constraint(op.f('users_email_key'), 'users', ['email'], postgresql_nulls_not_distinct=False)
    op.create_unique_constraint(op.f('uq_user_username'), 'users', ['username'], postgresql_nulls_not_distinct=False)
    op.create_unique_constraint(op.f('uq_user_email'), 'users', ['email'], postgresql_nulls_not_distinct=False)
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.create_table('models',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('models_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('filename', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('uploaded_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('filepath', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('uploader', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('role', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('tags', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('category', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('volume_mm3', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('dimensions_mm', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('face_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('preview_image', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('geometry_hash', sa.VARCHAR(length=64), autoincrement=False, nullable=True),
    sa.Column('is_duplicate', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='models_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('ix_models_geometry_hash'), 'models', ['geometry_hash'], unique=True)
    op.create_table('favorites',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('model_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['model_id'], ['models.id'], name=op.f('favorites_model_id_fkey')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('favorites_user_id_fkey'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('favorites_user_id_fkey1')),
    sa.PrimaryKeyConstraint('id', name=op.f('favorites_pkey')),
    sa.UniqueConstraint('user_id', 'model_id', name=op.f('uq_user_model_favorite'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('estimate_settings',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('custom_text_base_cost', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('custom_text_cost_per_char', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('estimate_settings_pkey'))
    )
    op.create_table('filaments',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('group', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('price_per_kg', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('color_hex', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('filaments_pkey'))
    )
    # ### end Alembic commands ###
